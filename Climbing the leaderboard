/* An arcade game player wants to climb to the top of the leaderboard and track their ranking. 
The scores of other players are given and scores of a player in different games given.
Return the Rank of the player after each game  */





#include <bits/stdc++.h>

using namespace std;

string ltrim(const string &);
string rtrim(const string &);
vector<string> split(const string &);




vector<int> climbingLeaderboard(vector<int> ranked, vector<int> player) 
{
    long int i,ranks[ranked.size()],rank = 1,k,s=0;
    vector<int> result;
    
    
    
    ranks[0] = 1;
    
    
    for(i=1;i<ranked.size();i++)
    {
        if(ranked[i] < ranked[i-1])
        {
            rank++;
            ranks[i] = rank;
        }
        else
        {
            ranks[i] = rank; 
        }
    }
    
    
    
    if(player[player.size() - 1] < ranked[ranked.size() - 1])
    {
        for(i=0; i<player.size(); i++)
        {
            result.push_back( ranks[ranked.size() - 1] + 1);
        }
    }
    
    else
    {
        if(player[0] < ranked[ranked.size() - 1])
        {
            result.push_back( ranks[ranked.size() - 1] + 1 );
            
            s = 1;
        }
        
        
        k = ranked.size() - 1;
        
        
        for(i=s;i<player.size();i++)
        {
            while(player[i] >= ranked[k] && k != -1)
            {
                k--;
            }
            
            if(k == -1)
            {
                result.push_back(1); 
            }
            else
            {
                result.push_back(ranks[k+1]); 
            } 
        }
    }


    return result;
}

int main()
{
    ofstream fout(getenv("OUTPUT_PATH"));

    string ranked_count_temp;
    getline(cin, ranked_count_temp);

    int ranked_count = stoi(ltrim(rtrim(ranked_count_temp)));

    string ranked_temp_temp;
    getline(cin, ranked_temp_temp);

    vector<string> ranked_temp = split(rtrim(ranked_temp_temp));

    vector<int> ranked(ranked_count);

    for (int i = 0; i < ranked_count; i++) {
        int ranked_item = stoi(ranked_temp[i]);

        ranked[i] = ranked_item;
    }

    string player_count_temp;
    getline(cin, player_count_temp);

    int player_count = stoi(ltrim(rtrim(player_count_temp)));

    string player_temp_temp;
    getline(cin, player_temp_temp);

    vector<string> player_temp = split(rtrim(player_temp_temp));

    vector<int> player(player_count);

    for (int i = 0; i < player_count; i++) {
        int player_item = stoi(player_temp[i]);

        player[i] = player_item;
    }

    vector<int> result = climbingLeaderboard(ranked, player);

    for (size_t i = 0; i < result.size(); i++) {
        fout << result[i];

        if (i != result.size() - 1) {
            fout << "\n";
        }
    }

    fout << "\n";

    fout.close();

    return 0;
}

string ltrim(const string &str) {
    string s(str);

    s.erase(
        s.begin(),
        find_if(s.begin(), s.end(), not1(ptr_fun<int, int>(isspace)))
    );

    return s;
}

string rtrim(const string &str) {
    string s(str);

    s.erase(
        find_if(s.rbegin(), s.rend(), not1(ptr_fun<int, int>(isspace))).base(),
        s.end()
    );

    return s;
}

vector<string> split(const string &str) {
    vector<string> tokens;

    string::size_type start = 0;
    string::size_type end = 0;

    while ((end = str.find(" ", start)) != string::npos) {
        tokens.push_back(str.substr(start, end - start));

        start = end + 1;
    }

    tokens.push_back(str.substr(start));

    return tokens;
}
