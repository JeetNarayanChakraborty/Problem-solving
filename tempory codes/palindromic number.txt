//Make a palindromic number given the maximum number of changes allowed




        ArrayList<Integer> digits = new ArrayList<Integer>();
        int i,t,lowerLimit=0,upperLimit=n-1,required=0;
        String result="";
        
        
        
    
        
        for(i=0; i<s.length(); i++)
        {
            digits.add(Character.getNumericValue(s.charAt(i)));
        }   
        
        
        if(n % 2 != 0)
        {
            for(i=0; i<digits.size(); i++)
            {
                if(digits.get(i) != 9)
                {
                    required++;
                }
            }
            
            
            if(required > k)
            {
                return "-1";
            }
            
            
            
            if(k % 2 == 0)
            {
                k = k / 2;
                
                for(i=0; i<k; i++)
                {
                    digits.set(lowerLimit, 9);
                    digits.set(upperLimit, 9);
                    
                    
                    
                    lowerLimit++;
                    upperLimit--;
                }
            }
            
            else
            {
                t = k;
                k = k - ((k / 2) * 2);
                
                
                for(i=0; i<t/2; i++)
                {
                    digits.set(lowerLimit, 9);
                    digits.set(upperLimit, 9);
                    
                    
                    lowerLimit++;
                    upperLimit--;
                }
                
                
                digits.set((n+1)/2-1, 9);
            }   
        }
        
        else
        {
            for(i=0; i<digits.size(); i++)
            {
                if((i != n/2) && (i != (n/2 - 1)) && digits.get(i) != 9)
                {
                    required++;
                }
            }
            
            
            if(required > k)
            {
                return "-1";
            }
            
            
            
            
           
           
            if(k % 2 == 0)
            {
                k = k / 2;
                
                for(i=0; i<k; i++)
                {
                    digits.set(lowerLimit, 9);
                    digits.set(upperLimit, 9);
                    
                    
                    lowerLimit++;
                    upperLimit--;
                }
            }
            
            
            else
            {
                t = k;
                k = k - ((k / 2) * 2);
                
                
                for(i=0; i<t/2; i++)
                {
                    digits.set(lowerLimit, 9);
                    digits.set(upperLimit, 9);
                    
                    
                    lowerLimit++;
                    upperLimit--;
                }
                
                
                if(digits.get((n/2) -1) > digits.get(n/2))
                {
                    digits.set(n/2 , digits.get((n/2) -1));
                }
                else
                {
                    digits.set((n/2)-1, digits.get(n/2));
                }
            }  
        }
        
        
        for(i=0; i<digits.size(); i++)
        {
            result += digits.get(i);
        }
        
        
        
        
        
        
        return result;
